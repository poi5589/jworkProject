<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="essMapper">
	
	<resultMap id="attendenceResult" type="Attendence">
		<id column="att_no" property="attNo" />
		<result column="emp_no" property="empNo" />
		<result column="start_time" property="startTime" />
		<result column="end_time" property="endTime" />
		<result column="att_time" property="attTime" />
		<result column="att_status" property="attStatus" />
		<result column="att_date" property="attDate" />
		<result column="after_time" property="afterTime" />
		<result column="week_time" property="weekTime" />
		<result column="month_time" property="monthTime" />
	</resultMap>
	
	<resultMap id="annualResult" type="Annual">
		<id column="annual_no" property="annualNo" />
		<result column="emp_no" property="empNo" />
		<result column="emp_name" property="empName" />
		<result column="dept_name" property="deptName" />
		<result column="job_name" property="jobName" />
		<result column="enroll_date" property="enrollDate" />
		<result column="annual_count" property="annualCount" />
		<result column="annual_create" property="annualCreate" />
		<result column="annual_use" property="annualUse" />
		<result column="annual_date" property="annualDate" />
		<result column="annual_category" property="annualCategory" />
	</resultMap>
	
	<resultMap id="businesstripResult" type="Businesstrip">
		<id column="bt_no" property="btNo" />
		<result column="emp_no" property="empNo" />
		<result column="dept_code" property="deptCode" />
		<result column="team_code" property="teamCode" />
		<result column="team_name" property="teamName" />
		<result column="emp_name" property="empName" />
		<result column="dept_name" property="deptName" />
		<result column="job_name" property="jobName" />
		<result column="job_code" property="jobCode" />
		<result column="bt_start" property="btStart" />
		<result column="bt_end" property="btEnd" />
		<result column="bt_content" property="btContent" />
		<result column="bt_status" property="btStatus" />
		<result column="bt_check" property="btCheck" />
		<result column="enroll_date" property="enrollDate" />
		<result column="first_date" property="firstDate" />
		<result column="second_date" property="secondDate" />
		<result column="fail_date" property="failDate" />
		<result column="first_approval" property="firstApproval" />
		<result column="second_approval" property="secondApproval" />
	</resultMap>
	
	<resultMap id="leaveResult" type="Leave">
		<id column="leave_no" property="leaveNo" />
		<result column="emp_no" property="empNo" />
		<result column="emp_name" property="empName" />
		<result column="dept_name" property="deptName" />
		<result column="job_code" property="jobCode" />
		<result column="dept_code" property="deptCode" />
		<result column="team_code" property="teamCode" />
		<result column="team_name" property="teamName" />
		<result column="job_name" property="jobName" />
		<result column="leave_category" property="leaveCategory" />
		<result column="lcategory_name" property="lcName" />
		<result column="leave_start" property="leaveStart" />
		<result column="leave_end" property="leaveEnd" />
		<result column="leave_content" property="leaveContent" />
		<result column="leave_status" property="leaveStatus" />
		<result column="leave_check" property="leaveCheck" />
		<result column="enroll_date" property="enrollDate" />
		<result column="first_date" property="firstDate" />
		<result column="second_date" property="secondDate" />
		<result column="fail_date" property="failDate" />
		<result column="first_approval" property="firstApproval" />
		<result column="second_approval" property="secondApproval" />
	</resultMap>
	
	<resultMap id="leaveCategoryResult" type="LeaveCategory">
		<id column="lcategory_no" property="lcNo" />
		<result column="lcategory_name" property="lcName" />
	</resultMap>
	
	<resultMap id="overtimeResult" type="Overtime">
		<id column="ot_no" property="otNo" />
		<result column="emp_no" property="empNo" />
		<result column="dept_code" property="deptCode" />
		<result column="team_code" property="teamCode" />
		<result column="team_name" property="teamName" />
		<result column="emp_name" property="empName" />
		<result column="dept_name" property="deptName" />
		<result column="job_name" property="jobName" />
		<result column="job_code" property="jobCode" />
 		<result column="enroll_date" property="enrollDate" />
		<result column="ot_category" property="otCategory" />
		<result column="ot_start" property="otStart" />
		<result column="ot_end" property="otEnd" />
		<result column="ot_content" property="otContent" />
		<result column="ot_status" property="otStatus" />
		<result column="ot_check" property="otCheck" />
		<result column="first_date" property="firstDate" />
		<result column="second_date" property="secondDate" />
		<result column="fail_date" property="failDate" />
		<result column="first_approval" property="firstApproval" />
		<result column="second_approval" property="secondApproval" />
		<result column="week_time" property="weekTime" />
	</resultMap>
	
	<resultMap id="worktimeResult" type="Worktime">
		<id column="wt_no" property="wtNo" />
		<result column="att_no" property="attNo" />
		<result column="wt_date" property="wtDate" />
		<result column="re_start_time" property="reStartTime" />
		<result column="re_end_time" property="reEndTime" />
		<result column="re_content" property="reContent" />
		<result column="approval_no" property="approvalNo" />
		<result column="approval_date" property="approvalDate" />
		<result column="approval_check" property="approvalCheck" />
		<result column="emp_no" property="empNo" />
		<result column="emp_name" property="empName" />
		<result column="dept_code" property="deptCode" />
		<result column="dept_name" property="deptName" />
		<result column="job_code" property="jobCode" />
		<result column="job_name" property="jobName" />
		<result column="team_code" property="teamCode" />
		<result column="team_name" property="teamName" />
		<result column="att_date" property="attDate" />
		<result column="start_time" property="startTime" />
		<result column="end_time" property="endTime" />
	</resultMap>
	
	<!-- 휴가등록화면조회 -->
	<select id="selectLeaveCategory" resultMap="leaveCategoryResult">
		select
		        lcategory_no,
		        lcategory_name
		   from leave_category
		  where lcategory_no = #{no}
	</select>
	
	<!-- 휴가등록화면 잔여연차 -->
	<select id="selectAnnualCount" resultMap="annualResult">
		select 
		        sum(annual_count) as "annual_count"
		   from annual
		  where emp_no = #{empNo} 
	</select>
	
	<!-- 휴가등록 -->
	<insert id="insertLeave">
		insert 
		  into leave
		  (
		  	leave_no
		  , emp_no
		  , dept_code
		  , team_code
		  , job_code
		  , leave_category
		  , leave_start
		  , leave_end
		  , leave_content
		  , enroll_date
		  )
		  values
		  (
		  	seq_leno.nextval
		  , #{empNo}
		  , #{deptCode}
		  , #{teamCode}
		  , #{jobCode}
		  , #{leaveCategory}
		  , #{leaveStart}
		  , #{leaveEnd}
		  , #{leaveContent}
		  , sysdate
		  )
	</insert> 
	
	<!-- 연차등록시 차감연차 -->
	<insert id="updateAnuualCount">
		insert 
			  into annual(annual_no, emp_no, annual_count, annual_date, annual_category)
			select 
			       seq_anno.nextval
			     , emp_no
			     , - ((replace(#{leaveEnd},'-','') - replace(#{leaveStart},'-',''))) 
			     , sysdate
			     , 2
			  from employee e
			 where emp_no = #{empNo}
	</insert>
	
	<!-- 휴가페이징 -->
	<select id="selectLeaveListCount" resultType="_int">
		select
		       count(*)
		  from leave
		 where leave_status = 'Y'
		   and emp_no = #{empNo}
	</select>
	
	<!-- 휴가리스트조회 -->
	<select id="selectLeaveList" resultMap="leaveResult">
		select 
		       leave_no
		     , l.emp_no
		     , emp_name
		     , dept_name
		     , lcategory_name
		     , leave_start
		     , leave_end
		     , decode(leave_check,0,'결재대기(1차)',1,'결재대기(2차)',2,'승인',3,'반려') as "leave_check"
		  from leave l
		  join employee e on (l.emp_no = e.emp_no)
		  join department d on (e.dept_code = d.dept_code)
		  join leave_category c on (l.leave_category = c.lcategory_no)
		 where leave_status = 'Y' 
		   and l.emp_no = #{empNo}
		 order
		    by leave_no desc
	</select>
	
	<!-- 휴가상세조회 -->
	<select id="selectLeaveDetail" resultMap="leaveResult">
		select 
		       leave_no
		     , l.emp_no
		     , lcategory_name
		     , leave_start
		     , leave_end
		     , leave_content
		     , leave_check
		  from leave l
		  join employee e on (l.emp_no = e.emp_no)
		  join leave_category c on (l.leave_category = c.lcategory_no)
		 where leave_status = 'Y' 
		   and l.emp_no = #{empNo}
		   and leave_no = #{leaveNo}
	</select>
	
	<!-- 휴가신청삭제 -->
	<update id="deleteLeave">
		update leave
		   set leave_status = 'N'
		 where leave_no = #{leaveNo}
	</update>
	
	<!-- 관리자 : 휴가전체조회페이징 -->
	<select id="adminSelectLeaveListCount" resultType="_int">
		select
		       count(*)
		  from leave
		 where leave_status = 'Y'
	</select>
	
	<!-- 관리자 : 휴가전체조회 (팀있는사람) -->
	<select id="adminSelectLeaveList" resultMap="leaveResult">
		select 
		       leave_no
		     , l.emp_no
		     , emp_name
		     , e.dept_code
		     , dept_name
		     , e.job_code
		     , job_name
		     , team_name
		     , e.team_code
		     , l.enroll_date
		     , lcategory_name
		     , leave_start
		     , leave_end
		     , decode(leave_check,0,'결재대기(1차)',1,'결재대기(2차)',2,'승인',3,'반려') as "leave_check"
		  from leave l
		  join employee e on (l.emp_no = e.emp_no)
		  join department d on (e.dept_code = d.dept_code)
		  join job j on (e.job_code = j.job_code)
		  join leave_category c on (l.leave_category = c.lcategory_no)
		  join team t on (e.team_code = t.team_code)
		 where leave_status = 'Y' 
		   and e.dept_code = #{deptCode}
		   and e.team_code = #{teamCode}
		   and e.job_code in (
		   						select
								       job_code
								  from job
								 where job_code > #{jobCode}
		                    )
		 order
		    by leave_no desc
	</select>
	
	<!-- 관리자 : 휴가전체조회 (팀없는사람) -->
	<select id="adminNoSelectLeaveList" resultMap="leaveResult">
		select 
		       leave_no
		     , l.emp_no
		     , emp_name
		     , e.dept_code
		     , dept_name
		     , e.job_code
		     , job_name
		     , team_name
		     , e.team_code
		     , l.enroll_date
		     , lcategory_name
		     , leave_start
		     , leave_end
		     , decode(leave_check,0,'결재대기(1차)',1,'결재대기(2차)',2,'승인',3,'반려') as "leave_check"
		  from leave l
		  join employee e on (l.emp_no = e.emp_no)
		  join department d on (e.dept_code = d.dept_code)
		  join job j on (e.job_code = j.job_code)
		  join leave_category c on (l.leave_category = c.lcategory_no)
		  join team t on (e.team_code = t.team_code)
		 where leave_status = 'Y' 
		   and e.dept_code = #{deptCode}
		   and e.job_code in (
		   						select
								       job_code
								  from job
								 where job_code > #{jobCode}
		                    )
		 order
		    by leave_no desc
	</select>
	
	<!-- 관리자 : 휴가상세조회  -->
	<select id="adminLeaveDetail" resultMap="leaveResult">
		select 
		       leave_no
		     , l.emp_no
		     , emp_name
		     , e.dept_code
		     , dept_name
		     , e.team_code
		     , e.job_code
		     , job_name
		     , l.enroll_date
		     , lcategory_name
		     , leave_content
		     , leave_start
		     , leave_end
		     , fail_date
		     , first_date
		     , first_approval
		     , second_date
		     , second_approval
		  from leave l
		  join employee e on (l.emp_no = e.emp_no)
		  join department d on (e.dept_code = d.dept_code)
		  join job j on (e.job_code = j.job_code)
		  join leave_category c on (l.leave_category = c.lcategory_no)
		 where leave_status = 'Y'
		   and leave_no = #{leaveNo} 
	</select>
	
	<!-- 관리자 : 휴가 1차결재  -->
	<update id="adminFirstLeave">
		update leave
		   set leave_check = 1
		     , first_date = sysdate
		     , first_approval = #{firstApproval}
		 where leave_no = #{leaveNo} 
	</update>
	
	<!-- 관리자 : 휴가 2차결재  -->
	<update id="adminSecondLeave">
		update leave
		   set leave_check = 2
		     , second_date = sysdate
		     , second_approval = #{secondApproval}
		 where leave_no = #{leaveNo} 
	</update>
	
	<!-- 관리자 : 휴가결재선 반려 -->
	<update id="adminReturnLeave">
		update leave
		   set fail_date = sysdate
		     , leave_check = 3
		 where leave_no = #{leaveNo}
	</update>
	
	<!-- 관리자 : 연차부여(한달)  -->
	<insert id="adminUpdateMonth">
		<![CDATA[
		insert 
		  into annual(annual_no, emp_no, annual_count, annual_date, annual_category)
		select seq_anno.nextval, emp_no, 1, sysdate, 1
		  from employee e
		 where to_char(add_months(e.enroll_date, 12), 'YYYY-MM-DD') > to_char(TRUNC(SYSDATE, 'YYYY') ,'YYYY-MM-DD')
		]]>
	</insert>
	
	
	<!-- 관리자 : 연차부여(일년) -->
	<insert id="adminUpdateYear">
		<![CDATA[
		insert 
		  into annual(annual_no, emp_no, annual_count, annual_date, annual_category)
		select seq_anno.nextval, emp_no, 15, sysdate, 1
		  from employee e
		 where to_char(add_months(e.enroll_date, 12), 'YYYY-MM-DD') < to_char(TRUNC(SYSDATE, 'YYYY') ,'YYYY-MM-DD')
		]]>
	</insert>
	
	<!-- 관리자 : 연차관리 페이징 -->
	<select id="adminAnnualListCount" resultType="_int">
		select
		       count(*)
		  from annual
	</select>
	
	<!-- 관리자 : 연차관리 전체조회 -->
	<select id="adminAnnualList" resultMap="annualResult">
		select
		       e.emp_no
		     , emp_name
		     , dept_name
		     , job_name
		     , (select sum(annual_count) from annual a where annual_category = 1 and a.emp_no = e.emp_no) as "annual_create"
		     , (select sum(annual_count) from annual a where annual_category = 2 and a.emp_no = e.emp_no) as "annual_use"
		     , sum(annual_count) as "annual_count"
		     , to_char(e.enroll_date, 'yyyy-mm-dd') as "enroll_date"
		  from employee e
		  join annual a on (e.emp_no = a.emp_no)
		  join department d on (e.dept_code = d.dept_code)
		  join job j on (e.job_code = j.job_code)
         group
            by e.emp_no,emp_name, dept_name, job_name, e.enroll_date
		 order
		    by e.emp_no desc
	</select>
	
	<!-- 관리자 : 전체휴가일정 캘린더조회 -->
	<select id="adminSelectAllLeaveList" resultMap="leaveResult">
		select 
		       emp_name
		     , lcategory_name
		     , leave_start
		     , leave_end
		  from leave l
		  join employee e on (l.emp_no = e.emp_no)
		  join leave_category c on (l.leave_category = c.lcategory_no)
		 where leave_status = 'Y' 
		   and leave_check = 2
	</select>
	
	<!-- 시간외근무등록 -->
	<insert id="insertOvertime">
		insert
		  into overtime
		  (
		  	ot_no
		  , emp_no
		  , dept_code
		  , team_code
		  , job_code
		  , enroll_date
		  , ot_category
		  , ot_start
		  , ot_end
		  , ot_content
		  )
		  values
		  (
		  	seq_otno.nextval
		  , #{empNo}
		  , #{deptCode}
		  , #{teamCode}
		  , #{jobCode}
		  , #{enrollDate}
		  , #{otCategory}
		  , #{otStart}
		  , #{otEnd}
		  , #{otContent} 
		  )
	</insert>
	
	<!-- 출장등록 -->
	<insert id="insertBusinesstrip">
		insert 
		  into businesstrip
		  (
		  	bt_no
		  , emp_no
		  , dept_code
		  , team_code
		  , job_code
		  , bt_start
		  , bt_end
		  , bt_content
		  )
		  values
		  (
		  	seq_btno.nextval
		  , #{empNo}
		  , #{deptCode}
		  , #{teamCode}
		  , #{jobCode}
		  , #{btStart}
		  , #{btEnd}
		  , #{btContent}
		  )
	</insert>
	
	<!-- 시간외근무페이징 -->
	<select id="selectOvertimeListCount" resultType="_int">
		select 
		       count(*)
		  from overtime
		 where ot_status = 'Y'
		   and emp_no = #{empNo} 
	</select>
	
	<!-- 출장페이징 -->
	<select id="selectBusinesstripListCount" resultType="_int">
		select 
		       count(*)
		  from businesstrip
		 where bt_status = 'Y'
		   and emp_no = #{empNo}
	</select>
	
	<!-- 시간외근무조회 -->
	<select id="selectOvertimeList" resultMap="overtimeResult">
		select 
			   ot_no
			 , o.emp_no	
		     , emp_name
		     , dept_name
		     , o.enroll_date
		     , decode(ot_category,0,'시간외근무',1,'야간',2,'주말') as "ot_category"
		     , ot_start
		     , ot_end
		     , decode(ot_check,0,'결재대기(1차)',1,'결재대기(2차)',2,'승인',3,'반려') as "ot_check"
		     , ot_content  
		     , '0' || floor((to_date(ot_end, 'HH24:MI:SS') - to_date(ot_start, 'HH24:MI:SS'))*24) 
                || ':' 
               	|| round(mod((to_date(ot_end, 'HH24:MI:SS') - to_date(ot_start, 'HH24:MI:SS'))*24,1)*60) as "ot_time"
		  from overtime o
		  join employee e on (o.emp_no = e.emp_no)
		  join department d on (e.dept_code = d.dept_code)
		 where ot_status = 'Y'
		   and o.emp_no = #{empNo}
		 order
		    by ot_no desc
	</select>
	
	<!-- 출장조회 -->
	<select id="selectBusinesstripList" resultMap="businesstripResult">
		select 
		       bt_no
		     , b.emp_no
		     , emp_name
		     , dept_name
		     , bt_start
		     , bt_end
		     , decode(bt_check,0,'결재대기(1차)',1,'결재대기(2차)',2,'승인',3,'반려')as "bt_check"
		     , bt_content
		  from businesstrip b
		  join employee e on (e.emp_no = b.emp_no)
		  join department d on (e.dept_code = d.dept_code)
		 where bt_status = 'Y'
		   and b.emp_no = #{empNo}
		 order
		    by bt_no desc
	</select>
	
	<!-- 출장살세조회 -->
	<select id="selectBusinesstrip" resultMap="businesstripResult">
		select 
		       bt_no
		     , bt_start
		     , bt_end
		     , bt_content
		  from businesstrip 
		 where bt_status = 'Y'
		   and bt_no = #{btNo}
	</select>
	
	<!-- 시간외근무상세조회 -->
	<select id="selectOvertime" resultMap="overtimeResult">
		select 
			   ot_no
		     , o.enroll_date
		     , decode(ot_category,0,'시간외근무',1,'야간',2,'주말') as "ot_category"
		     , ot_start
		     , ot_end
		     , ot_content  
		  from overtime o
		  join employee e on (o.emp_no = e.emp_no)
		  join department d on (e.dept_code = d.dept_code)
		 where ot_status = 'Y'
		   and ot_no = #{otNo}
	</select>
	
	<!-- 시간외근무삭제 -->
	<update id="deleteOvertime">
		update overtime
		   set ot_status = 'N'
		 where ot_no = #{otNo}
	</update>
	
	<!-- 츌장삭제 -->
	<update id="deleteBusinesstrip">
		update businesstrip
		   set bt_status = 'N'
		 where bt_no = #{btNo}
	</update>
	
	<!-- 관리자 : 시간외근무페이징 -->
	<select id="adminSelectOvertimeListCount" resultType="_int">
		select 
		       count(*)
		  from overtime
		 where ot_status = 'Y'	
	</select>
	
	<!-- 관리자 : 출장페이징 -->
	<select id="adminSelectBusinesstripListCount" resultType="_int">
		select 
		       count(*)
		  from businesstrip
		 where bt_status = 'Y'
	</select>
	
	<!-- 관리자 : 시간외근무 전체조회 -->
	<select id="adminSelectOvertimeList" resultMap="overtimeResult">
		select 
			   ot_no
			 , o.emp_no	
		     , emp_name
		     , dept_name
		     , e.dept_code
		     , e.team_code
		     , team_name
		     , job_name
		     , e.job_code
		     , o.enroll_date
		     , decode(ot_category,0,'시간외근무',1,'야간',2,'주말') as "ot_category"
		     , ot_start
		     , ot_end
		     , decode(ot_check,0,'결재대기(1차)',1,'결재대기(2차)',2,'승인',3,'반려') as "ot_check"
		     , ot_content  
		  from overtime o
		  join employee e on (o.emp_no = e.emp_no)
		  join department d on (e.dept_code = d.dept_code)
		  join job j on (e.job_code = j.job_code)
		  join team t on (e.team_code = t.team_code)
		 where ot_status = 'Y'
		   and e.dept_code = #{deptCode}
		   and e.team_code = #{teamCode}
		   and e.job_code in (
		   						select
								       job_code
								  from job
								 where job_code > #{jobCode}
		                    )
		 order
		    by ot_no desc
	</select>
	
	<!-- 관리자 : 출장 전체조회 -->
	<select id="adminSelectBusinessetripList" resultMap="businesstripResult">
		select 
		       bt_no
		     , b.emp_no
		     , emp_name
		     , e.dept_code
		     , dept_name
		     , job_name
		     , e.job_code
		     , e.team_code
		     , team_name
		     , b.enroll_date
		     , bt_start
		     , bt_end
		     , decode(bt_check,0,'결재대기(1차)',1,'결재대기(2차)',2,'승인',3,'반려')as "bt_check"
		     , bt_content
		  from businesstrip b
		  join employee e on (e.emp_no = b.emp_no)
		  join department d on (e.dept_code = d.dept_code)
		  join job j on (e.job_code = j.job_code)
		  join team t on (e.team_code = t.team_code)
		 where bt_status = 'Y'
		   and e.dept_code = #{deptCode}
		   and e.team_code = #{teamCode}
		   and e.job_code in (
		   						select
								       job_code
								  from job
								 where job_code > #{jobCode}
		                    )
		 order
		    by bt_no desc
	</select>
	
	<!-- 관리자 : 출장상세조회 --> 
	<select id="adminSelectBusinesstrip" resultMap="businesstripResult">
		select 
		       bt_no
		     , emp_name
		     , e.emp_no
		     , dept_name
		     , e.dept_code
		     , e.team_code
		     , bt_start
		     , bt_end
		     , bt_content
		     , fail_date
		     , first_date
		     , first_approval
		     , second_date
		     , second_approval
		  from businesstrip b
		  join employee e on (e.emp_no = b.emp_no)
		  join department d on (e.dept_code = d.dept_code)
		  join team t on (e.team_code = t.team_code)
		 where bt_status = 'Y'
		   and bt_no = #{btNo}
	</select>
	
	<!-- 관리자 : 시간외근무상세조회 -->
	<select id="adminSelectOvertime" resultMap="overtimeResult">
		select 
			   ot_no
		     , emp_name
		     , dept_name
		     , o.enroll_date
		     , decode(ot_category,0,'시간외근무',1,'야간',2,'주말') as "ot_category"
		     , ot_start
		     , ot_end
		     , ot_content  
		     , fail_date
		     , first_date
		     , first_approval
		     , second_approval
		     , second_date
		  from overtime o
		  join employee e on (o.emp_no = e.emp_no)
		  join department d on (e.dept_code = d.dept_code)
		 where ot_status = 'Y'
		   and ot_no = #{otNo}
	</select>
	
	<!-- 관리자 : 출장 1차결재  -->
	<update id="adminFirstBusinesstrip">
		update businesstrip
		   set bt_check = 1
		     , first_date = sysdate
		     , first_approval = #{firstApproval}
		 where bt_no = #{btNo} 
	</update>
	
	<!-- 관리자 : 출장 2차결재  -->
	<update id="adminSecondBusinesstrip">
		update businesstrip
		   set bt_check = 2
		     , second_date = sysdate
		     , second_approval = #{secondApproval}
		 where bt_no = #{btNo} 
	</update>
	
	<!-- 관리자 : 출장 반려 -->
	<update id="adminReturnBusinesstrip">
		update businesstrip
		   set fail_date = sysdate
		     , bt_check = 3
		 where bt_no = #{btNo}
	</update>
	
	<!-- 관리자 : 시간외근무 1차결재  -->
	<update id="adminFirstOvertime">
		update overtime
		   set ot_check = 1
		     , first_date = sysdate
		     , first_approval = #{firstApproval}
		 where ot_no = #{otNo} 
	</update>
	
	<!-- 관리자 : 시간외근무 2차결재  -->
	<update id="adminSecondOvertime">
		update overtime
		   set ot_check = 2
		     , second_date = sysdate
		     , second_approval = #{secondApproval}
		 where ot_no = #{otNo} 
	</update>
	
	<!-- 관리자 : 시간외근무 반려 -->
	<update id="adminReturnOvertime">
		update overtime
		   set fail_date = sysdate
		     , ot_check = 3
		 where ot_no = #{otNo}
	</update>
	
	<!-- 관리자 : 메인페이지 근태버튼 -->
	<select id="selectAttendenceMain" resultMap="attendenceResult">
		select 
		       att_no
		     , NVL(start_time,'') as "start_time"
		     , NVL(end_time, '') as "end_time"
		  from attendence
		 where emp_no = #{empNo}
		   and att_date = to_char(sysdate, 'yy/mm/dd')
	</select>
	
	<!-- 관리자 : 새벽12시근태입력  -->
	<insert id="adminInsertAttendence">
		insert 
		  into attendence(att_no, emp_no, att_status, att_date)
		select seq_attno.nextval, emp_no, 3, sysdate
		  from employee
	</insert>
	
	<!-- 출근버튼 입력 -->
	<update id="insertStartAttendence">
		<![CDATA[
		update attendence
		   set start_time = to_char(sysdate, 'HH24:MI:SS') 
		     , att_status = case when to_char(sysdate, 'HH24:MI:SS')  <= '09:10:00' then 0
		                         when to_char(sysdate, 'HH24:MI:SS')  > '09:10:00' then 1
		                  end
		 where att_no = #{attNo} 
		]]>
	</update>
	
	<!-- 퇴근버튼 입력 -->
	<update id="insertEndAttendence">
		<![CDATA[
		update attendence
		   set end_time = to_char(sysdate, 'HH24:MI:SS') 
		     , att_status = case when start_time <= '09:10:00' and to_char(sysdate, 'HH24:MI:SS')  < '18:00:00' then 2
		     				     when start_time <= '09:10:00' and to_char(sysdate, 'HH24:MI:SS')  > '18:00:00' then 0
		                         when start_time > '09:10:00' and to_char(sysdate, 'HH24:MI:SS')  < '18:00:00' then 2
		                         when start_time > '09:10:00' and to_char(sysdate, 'HH24:MI:SS')  > '18:00:00' then 1
		                  end  
		 where att_no = #{attNo} 
		]]>
	</update>
	
	<!-- 근태 전체시간 입력 -->
	<update id="insertAllAttendenceTime">
		update attendence
		   set att_time = (Round((((to_date(end_time, 'HH24:MI:SS') - to_date(start_time, 'HH24:MI:SS'))*60*60*24) - 3600)/(60*60)))||'시간' ||
                          LPad(Round(Mod(((((to_date(end_time, 'HH24:MI:SS') - to_date(start_time, 'HH24:MI:SS'))*60*60*24) - 3600)/60),60)),2,0)||'분' ||
                          LPad(Round(Mod((((to_date(end_time, 'HH24:MI:SS') - to_date(start_time, 'HH24:MI:SS'))*60*60*24) - 3600),60)),2,0)||'초' 
		 where att_no = #{attNo}
	</update>
	
	<!-- 출퇴근전체조회 페이징 -->
	<select id="selectAttendenceListCount" resultType="_int">
		select
		       count(*)
		  from attendence
	</select>
	
	<!-- 출퇴근 전체조회 -->
	<select id="selectAttendenceList" resultMap="attendenceResult">
		select 
		       att_no
		     , emp_no
		     , start_time
		     , end_time
		     , att_time
		     , decode(att_status,0,'정상',1,'지각',2,'조퇴',3,'결근',4,'휴가',5,'출장') as "att_status"
		     , att_date
		     , after_time
		  from attendence 
		 where emp_no = #{empNo}
		 order
		    by att_date desc
	</select>
	
	<!-- 출퇴근상세조회 -->
	<select id="selectAttendence" resultMap="attendenceResult">
		select
		       att_no
		     , emp_no
		     , start_time
		     , end_time
		     , att_time
		     , att_status
		     , att_date
		     , after_time
		  from attendence
		 where att_no = #{attNo}
	</select>
	
	<!-- 출근시간 수정 -->
	<update id="insertModifyStartTime">
		insert 
		  into worktime
		  (
		  	wt_no
		  , att_no
		  , re_start_time
		  , re_content
		  , wt_date
		  , emp_no
		  , dept_code
		  , job_code
		  , team_code
		  )
		  values
		  (
		  	seq_wtno.nextval
		  , #{attNo}
		  , #{reStartTime} || ':00'
		  , #{reContent}
		  , sysdate
		  , #{empNo}
		  , #{deptCode}
		  , #{jobCode}
		  , #{teamCode}
		  )
	</update>
	
	<!-- 출근시간 수정 -->
	<update id="updateStartTime">
		update attendence
		   set start_time = #{reStartTime} 
		 where att_no = #{attNo}
	</update>
	
	<!-- 퇴근시간 수정 -->
	<insert id="insertModifyEndTime">
		insert 
		  into worktime
		  (
		  	wt_no
		  , att_no
		  , re_end_time
		  , re_content
		  , wt_date
		  , emp_no
		  , dept_code
		  , job_code
		  , team_code
		  )
		  values
		  (
		  	seq_wtno.nextval
		  , #{attNo}
		  , #{reEndTime} || ':00'
		  , #{reContent}
		  , sysdate
		  , #{empNo}
		  , #{deptCode}
		  , #{jobCode}
		  , #{teamCode}
		  )
	</insert>
	
	<!-- 퇴근시간 수정 -->
	<update id="updateEndTime">
		update attendence
		   set end_time = #{reEndTime} 
		 where att_no = #{attNo}
	</update>
	
	<!-- 근태시간 수정 -->
	<insert id="insertModifyWorktime">
		insert 
		  into worktime
		  (
		  	wt_no
		  , att_no
		  , re_start_time 
		  , re_end_time 
		  , re_content
		  , wt_date
		  , emp_no
		  , dept_code
		  , job_code
		  , team_code
		  )
		  values
		  (
		  	seq_wtno.nextval
		  , #{attNo}
		  , #{reStartTime} || ':00'
		  , #{reEndTime} || ':00'
		  , #{reContent}
		  , sysdate
		  , #{empNo}
		  , #{deptCode}
		  , #{jobCode}
		  , #{teamCode}
		  )
	</insert>
	
	<!-- 근태시간 수정 -->
	<update id="updateWorktime">
		update attendence
		   set start_time = #{reStartTime} 
		     , end_time = #{reEndTime} 
		 where att_no = #{attNo}
	</update>

	<!-- 근태캘린더 : 근태시간 조회 -->
	<select id="workCalendarAttendence" resultMap="attendenceResult">
		select
			   att_no
			 , emp_no
		     , start_time
		     , end_time
		     , att_status
		     , att_date
		  from attendence a
		 where emp_no = #{empNo}
	</select>
	
	<!-- 근태캘린더 : 출장 조회  -->
	<select id="workCalendarBusinesstrip" resultMap="businesstripResult">
		   select 
		       bt_no
		     , emp_no
		     , bt_start
		     , bt_end
		  from businesstrip b
		 where bt_status = 'Y'
		   and bt_check = 2
		   and b.emp_no = #{empNo}
	</select>
	
	<!-- 근태캘린더 : 시간외근무 조회 -->
	<select id="workCalendarOvertime" resultMap="overtimeResult">
		select 
			   ot_no	
			 , emp_no
		     , enroll_date
		     , '0' || floor((to_date(ot_end, 'HH24:MI:SS') - to_date(ot_start, 'HH24:MI:SS'))*24) 
                || ':' 
               	|| round(mod((to_date(ot_end, 'HH24:MI:SS') - to_date(ot_start, 'HH24:MI:SS'))*24,1)*60) as "ot_time"
		  from overtime o
		 where ot_status = 'Y'
		   and ot_check = 2
		   and o.emp_no = #{empNo}
	</select>
	
	<!-- 이번주 누적 근로시간 -->
	<select id="selectWeekWorktime" resultMap="attendenceResult">
		SELECT (Round(sum(ROUND((to_date(end_time,'HH24:MI:SS')-to_date(start_time,'HH24:MI:SS'))*24*60*60))/(60*60)))||'시'||' ' ||
               LPad(Round(Mod((sum(ROUND((to_date(end_time,'HH24:MI:SS')-to_date(start_time,'HH24:MI:SS'))*24*60*60))/60),60)),2,0)||'분' || ' ' ||
               LPad(Round(Mod(sum(ROUND((to_date(end_time,'HH24:MI:SS')-to_date(start_time,'HH24:MI:SS'))*24*60*60)),60)),2,0)||'초' as "week_time"
          from attendence
         where emp_no = #{empNo}
           and att_date between trunc(sysdate, 'IW') and sysdate
	</select>
	
	<!-- 이번주 잔여 근로시간 -->
	<select id="selectWeekRemainWorktime" resultMap="attendenceResult">
		SELECT (Round((162000 - sum(ROUND( (to_date(end_time,'HH24:MI:SS')-to_date(start_time,'HH24:MI:SS') )*24*60*60))) /(60*60)))||'시'||' ' ||
                LPad(Round(Mod(((162000 - sum(ROUND( (to_date(end_time,'HH24:MI:SS')-to_date(start_time,'HH24:MI:SS') )*24*60*60))) /60),60)),2,0)||'분' || ' ' ||
       		    LPad(Round(Mod((162000 - sum(ROUND( (to_date(end_time,'HH24:MI:SS')-to_date(start_time,'HH24:MI:SS') )*24*60*60))) ,60)),2,0)||'초' AS TT
           from attendence
          where emp_no = #{empNo}
            and att_date between trunc(sysdate, 'IW') and sysdate
	</select>
	
	<!-- 이번달 누적 근로시간 -->
	<select id="selectMonthWorktime" resultMap="attendenceResult">
		SELECT (Round(sum(ROUND((to_date(end_time,'HH24:MI:SS')-to_date(start_time,'HH24:MI:SS'))*24*60*60))/(60*60)))||'시'||' ' ||
               LPad(Round(Mod((sum(ROUND((to_date(end_time,'HH24:MI:SS')-to_date(start_time,'HH24:MI:SS'))*24*60*60))/60),60)),2,0)||'분' || ' ' ||
               LPad(Round(Mod(sum(ROUND((to_date(end_time,'HH24:MI:SS')-to_date(start_time,'HH24:MI:SS'))*24*60*60)),60)),2,0)||'초' as "month_time"
          from attendence
         where emp_no = #{empNo}
           and att_date between TRUNC(SYSDATE, 'MM') and sysdate
	</select>
	
	<!-- 이번주 누적 시간외근무시간 -->
	<select id="selectWeekOvertime" resultMap="overtimeResult">
		SELECT (Round(sum(ROUND((to_date(ot_end,'HH24:MI:SS')-to_date(ot_start,'HH24:MI:SS'))*24*60*60))/(60*60)))||'시'||' ' ||
               LPad(Round(Mod((sum(ROUND((to_date(ot_end,'HH24:MI:SS')-to_date(ot_start,'HH24:MI:SS'))*24*60*60))/60),60)),2,0)||'분' || ' ' ||
               LPad(Round(Mod(sum(ROUND((to_date(ot_end,'HH24:MI:SS')-to_date(ot_start,'HH24:MI:SS'))*24*60*60)),60)),2,0)||'초' as "week_time"
          from overtime
         where emp_no = #{empNo}
           and enroll_date between trunc(sysdate, 'IW') and sysdate
	</select>
	
	<!-- 근태수정리스트 조회페이징 -->
	<select id="selectModifyWorktimeListCount" resultType="_int">
		select
		       count(*)
		  from attendence  
		 where emp_no in #{empNo}
	</select>
	
	<!-- 근태수정리스트 조회 -->
	<select id="selectModifyWorktimeList" resultMap="worktimeResult">
		select 
		       wt_no
		     , w.att_no
		     , decode(approval_check,0,'결재대기',1,'승인',2,'반려') as "approval_check"
		     , e.emp_no
		     , dept_name
		     , job_name
		     , team_name
		     , emp_name
		     , start_time
		     , end_time
		     , att_date
		  from worktime w
		  join attendence a on (a.att_no = w.att_no)
		  join employee e on (e.emp_no = a.emp_no)
		  join department d on (e.dept_code = d.dept_code)
		  join job j on (e.job_code = j.job_code)
		  join team t on (e.team_code = t.team_code)
		 where e.emp_no = #{empNo}   
		 order
		    by wt_no desc
	</select>
	
	<!-- 근태수정 상세조회 -->
	<select id="selectModifyDetailWorktime" resultMap="worktimeResult">
		select
		       wt_no
		     , w.att_no
		     , w.emp_no
		     , start_time
		     , end_time
		     , att_date
		     , re_start_time
		     , re_end_time
		     , re_content
		     , approval_check
	     from worktime w
	     join attendence a on (w.att_no = a.att_no) 
	    where wt_no = #{wtNo}
	</select>
	
	<!-- 관리자 : 근태수정조회리스트 페이징 -->
	<select id="adminSelectModifyWorktimeListCount" resultType="_int">
		select
		       count(*)
		  from worktime
	</select>
	
	<!-- 관리자 : 근태수정조회리스트조회 -->
	<select id="adminSelectModifyWorktimeList" resultMap="worktimeResult">
	<![CDATA[
		select 
		       wt_no
		     , w.att_no
		     , w.emp_no
		     , dept_name
		     , team_name
		     , job_name
		     , emp_name
		     , att_date
		     , decode(approval_check, 0, '결재대기', 1, '승인', 2, '반려') as "approval_check"
		  from worktime w
		  join attendence a on (w.att_no = a.att_no)
		  join employee e on (e.emp_no = w.emp_no)
		  join department d on (e.dept_code = d.dept_code)
		  join team t on (e.team_code = t.team_code)
		  join job j on (e.job_code = j.job_code)
		 where w.att_no = a.att_no 
		   and e.dept_code = #{deptCode}
		   and e.team_code = #{teamCode}
		   and e.job_code in (
		   						select
								       job_code
								  from job
								 where job_code > #{jobCode}
		                    ) 
		 order
		    by wt_no desc
	]]>
	</select>
	
	<!-- 관리자 : 출퇴근상세조회 -->
	<select id="adminSelectAttendence" resultMap="worktimeResult">
		select
		       w.att_no
		     , w.wt_no
		     , w.emp_no
		     , start_time
		     , end_time
		     , approval_check
		     , re_start_time
		     , re_end_time
		     , re_content
		     , att_status
		     , att_date
		  from worktime w
		  join attendence a on (w.att_no = w.att_no)
		 where wt_no = #{wtNo}
		   and w.att_no = a.att_no
	</select>

	<!-- 관리자 : 근태수정 반려 -->
	<update id="adminModifyWorktimeReturn">
		update worktime
		   set approval_check = 2
		 where wt_no = #{wtNo}
	</update>
	
	<!-- 관리자 : 근태수정 승인 -->
	<update id="adminModifyWorktimeSubmit">
		update worktime
		   set approval_check = 1
		 where wt_no = #{wtNo}
	</update>
	
	<!-- 관리자 : 전사원 근태조회 페이징 -->
	<select id="adminWorktimeStatusListCount" resultType="_int">
		select count(*)
		  from attendence
		 where <if test="attStatus != 100">
		       att_status = #{attStatus}
		       </if>
	</select>
	
	
	<!-- 버튼 눌렀을 시 리스트 조회 -->
	<select id="adminWorktimeStatusList" resultMap="attendenceResult">
		select  
	      	   a.emp_no
	     	 , dept_name
	     	 , team_name
	     	 , job_name
	         , emp_name
	         , start_time
	         , end_time
	         , att_time
	         , decode(att_status,0,'정상',1,'지각',2,'조퇴',3,'결근',4,'휴가',5,'출장') as "att_status"
		  from attendence a
		  join employee e on (e.emp_no = a.emp_no)
		  join department d on (e.dept_code = e.dept_code)
		  join job j on (e.job_code = j.job_code)
		  join team t on (e.team_code = t.team_code)
		 where <if test="attStatus != 100">
		       att_status = #{attStatus}
		       </if>
		   and att_date between TRUNC(SYSDATE, 'MM') and LAST_DAY(SYSDATE)
		 order
		    by att_no desc
	</select>




	
	<!-- 휴가 승인 후 휴가 정보 조회 -->
	<select id="selectSignedLeave" resultMap="leaveResult">
		select
		       leave_no
		     , emp_no
		     , lcategory_name
		  from leave
		  join leave_category on (lcategory_no = leave_category)
		 where leave_no = #{leaveNo}
	</select>


	<!-- 출장 승인 후 출장 정보 조회 -->
	<select id="selectSignedBusinesstrip" resultMap="businesstripResult">
		select
		       bt_no
		     , emp_no
		  from businesstrip
		 where bt_no = #{btNo}
	</select>
	
	
	<!-- 시간외근무 승인 후 시간외근무 정보 조회 -->
	<select id="selectSignedOvertime" resultMap="overtimeResult">
		select
		       ot_no
		     , emp_no
		  from overtime
		 where ot_no = #{otNo}
	</select>




</mapper>
